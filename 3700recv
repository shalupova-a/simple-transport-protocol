#!/usr/bin/env python3

import sys
import socket
import time
import datetime
import select
import json


def print_whole(received):
  s = 0
  while True:
    m = received[s]
    if m['eof']:
      log("[completed]")
      sys.exit(0)
    else:
      sys.stdout.write(m['data'])
      s += len(m['data'])

def log(string):
  sys.stderr = open('log.txt', 'w')
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")
  sys.stderr.close()

MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
udp_ip = "127.0.0.1"
udp_port = 0

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((udp_ip, udp_port))
sock.settimeout(TIMEOUT)

# Get port we bound to
udp_port = sock.getsockname()[1]
log(f"[bound] {udp_port}")

received = {}

# Now listen for packets
while True:

  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result
    data = data.decode('ascii')

    try:
      decoded = json.loads(data)
      #log("RECEIVED PACKET: " decoded)
      # If the EOF flag is set, exit
      if decoded['eof']:
        received[decoded['sequence']] = decoded
        log("[eof] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ")" )

      # If there is data, we accept it and print it out
      if decoded['data']:
        received[decoded['sequence']] = decoded
        log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED")

      s = 0
      temp_msg = None
      m = {"sequence": 0, "data": ""}
      cur_msg = None
      e = 0
      while True:
        temp_msg = m
        m = received.get(s)
        if m is None:
          cur_msg = temp_msg
          break
        elif m['sequence'] == decoded['sequence']:
          cur_msg = m
          if decoded['eof']:
            e = 1
          break
        else:
          s += len(m['data'])

      l = len(cur_msg['data'])

      msg = json.dumps({"ack": cur_msg['sequence'] + l})
      log("ABOUT TO SEND " + msg)
      if sock.sendto(msg.encode('ascii'), addr) < len(msg):
        log("[error] unable to fully send packet")
      if e:
        for i in range(0,5):
          if sock.sendto(msg.encode('ascii'), addr) < len(msg):
            log("[error] unable to fully send packet")
          time.sleep(0.1)

      s = 0
      while True:
        m = received.get(s)
        if m is None:
          break
        elif m['eof']:
          print_whole(received)
        else:
          s += len(m['data'])

    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
    sys.exit(-1)
